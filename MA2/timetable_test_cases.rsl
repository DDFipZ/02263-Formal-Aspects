net_test_cases

scheme timetable_test_cases = 
extend net_test_cases with 
class
-------------- TimeTable values and test cases --------------
value
  tram1_id : TramId = "Tram1",
  tram1_plan : Plan =
    <.
      (stopA_id, 0, 1),
      (stopB_id, 12, 14),
      (stopC_id, 28, 32),
      (stopB_id, 46, 48),
      (stopA_id, 59, 60)
    .>,

  tram2_id : TramId = "Tram2",
    tram2_plan : Plan =
      <.
        (stopD_id, 0, 2),
        (stopB_id, 11, 13),
        (stopA_id, 28, 32),
        (stopB_id, 47, 50),
        (stopD_id, 58, 60)
      .>,

  wellFormedTt1 : TimeTable = 
    [
      tram1_id +> tram1_plan,
      tram2_id +> tram2_plan
    ],
  wellFormed_tram1Tt : TimeTable = 
    [
      tram1_id +> tram1_plan
    ],

  wellFormedTt1_extended : TimeTable = 
    [
      tram1_id +> <.
        (stopA_id, 0, 1),
        (stopB_id, 12, 14),
        (stopC_id, 28, 32),
        (stopB_id, 46, 48),
        (stopA_id, 59, 60)
      .>,
      tram2_id +> tram2_plan
    ]

value -- NOT well formed TTs
  emptyTt : TimeTable = [],

  emptyPlanTt : TimeTable = [
      tram1_id +> tram1_plan,
      tram2_id +> <..>
      ],

  badStationTimeTt : TimeTable = [
    tram1_id +>
      <.
        (stopD_id, 0, 2),
        (stopB_id, 11, 13),
        (stopA_id, 33, 32),
        (stopB_id, 47, 50),
        (stopD_id, 58, 60)
      .>
    ],

  stationNotInNetTt : TimeTable = [
      tram1_id +>
        <.
          (stopD_id, 0, 2),
          ("Zzz", 11, 13),
          (stopA_id, 33, 32),
          (stopB_id, 47, 50),
          (stopD_id, 58, 60)
        .>
      ],
  notAdjacentStopsTt : TimeTable = 
    [
      tram1_id +> <.
        (stopA_id, 0, 1),
        (stopB_id, 12, 14),
        (stopC_id, 28, 32),
        (stopD_id, 46, 48),
        (stopA_id, 59, 60)
      .>,
      tram2_id +> tram2_plan
    ],

  
  myEnd : Int = 1

test_case 
  --  TimeTable observer tests
  [isIn_existingTram]
    isIn(tram1_id, wellFormedTt1) = true,
  [isIn_notExistingTram]
    isIn("tramNnn", wellFormedTt1) = false,
  [notEmpty_fullTimeTable]
    isTimetableNotEmpty(wellFormedTt1) = true, 
  [notEmpty_completelyEmptyTt]
    isTimetableNotEmpty(emptyTt) = false, 
  [notEmpty_emptyPlan]
    isTimetableNotEmpty(emptyPlanTt) = false,

  [timesInStop_correctTimes]
    checkArrivalTimeLessThanDepature(wellFormedTt1) = true, 
  [timesInStop_badArrivalTime]
    checkArrivalTimeLessThanDepature(badStationTimeTt) = false, 
  [allPlanStopsInNet_allInNet]
    allStopsInPlanExistsInNet(wellFormedTt1, wellFormedNet1) = true, 
  [allPlanStopsInNet_notAllInNet]
    allStopsInPlanExistsInNet(stationNotInNetTt, wellFormedNet1) = false, 
  [consecutiveStops_consecutive]
    planStopsDirectlyConnected(wellFormedTt1, wellFormedNet1) = true,
  [consecutiveStops_nonConsecutive]
    planStopsDirectlyConnected(notAdjacentStopsTt, wellFormedNet1) = false,

  -- TimeTable generator functions
  [addTram_nonExistingTram]
    addTram(tram2_id, wellFormed_tram1Tt) = [tram1_id +> tram1_plan, tram2_id +> <..>],
  [addTram_existingTram]
    addTram(tram2_id, wellFormedTt1) = [tram1_id +> tram1_plan, tram2_id +> <..>],
  [addStop_nonExistingStop]
    addStop(tram2_id, stopD_id, 0, 2, addTram(tram2_id, wellFormed_tram1Tt)) = [tram1_id +> tram1_plan, tram2_id +> <.(stopD_id, 0, 2).>],

  [wellFormedTimeTable_underwork]
    isWellformed(wellFormedTt1, wellFormedNet1) = true

end
