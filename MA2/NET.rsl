scheme NET = 
  class 
    type 
      Net = Stop -m-> Connection-set, -- tram nets
      Headway = Time, -- minimum headways
      DrivingTime = Time, -- minimum driving times
      Time = Nat, -- times in number of minutes
      Capacity = Nat, -- capacities
      Connection = Stop >< Stop >< Capacity >< Headway >< DrivingTime, 
      Stop = StopId >< Capacity, --Stops
      StopId = Text -- names of stops    
    value /* generators */ 
      empty : Net = [], -- the empty net
      -- insert a stop with a given name and capacity 
      -- -- Create the Stop object and make it a key to an empty value
      -- and return the new Net
      	
      insertStop : StopId >< Capacity >< Net -> Net
      insertStop(id, c, net) is net !! [(id, c) +> {}], 
      	 
      -- -- add a connection between given stops, 
      -- -- with the given minimum headway, capacity and minimum driving
      -- time
      -- -- 1. Check if the stops are in the map.
      -- -- 2. If so add a connection value to each of the stops    
      addConnection : 
        StopId >< StopId >< Headway >< Capacity >< DrivingTime >< Net -> Net
      addConnection(stopid_1, stopid_2, h, c, dt, net) is 
        net !! 
        [getStop(stopid_1, net) +> 
         net(getStop(stopid_1, net)) union 
         {(getStop(stopid_1, net), getStop(stopid_2, net), h, c, dt)}, 
         getStop(stopid_2, net) +> 
         net(getStop(stopid_2, net)) union 
         {(getStop(stopid_2, net), getStop(stopid_1, net), h, c, dt)}] 
    	 
    value /* observers */ 
      -- check whether a stop is in a network         
      isIn : StopId >< Net -> Bool
      isIn(stopid, net) is 
        (exists (si, capacity) : Stop :- 
           (si, capacity) isin dom net /\ si = stopid), 
      	 
      -- get the capacity of a stop     
      capacity : StopId >< Net -~-> Capacity
      capacity(stopid, net) is 
        hd ({capacity | (si, capacity) : Stop :- (si, capacity) isin dom net}), 
      	
      getStop : StopId >< Net -~-> Stop
      getStop(stopid, net) is 
        hd ({(si, net) | 
             (si, net) : Stop :- (si, net) isin dom net /\ si = stopid}), 
      	 
      -- check whether two stops are directly connected in a network  
      --          
      areDirectlyConnected : StopId >< StopId >< Net -> Bool
      -- Requirement one
      areDirectlyConnected(stopid1, stopid2, net) is 
        stopid2 isin 
          {stopid_2 | 
           (stop1, (stopid_2, c2), c, h, dt) : Connection :- 
             (stop1, (stopid_2, c2), c, h, dt) isin net(getStop(stopid1, net))} /\ 
        stopid1 isin 
          {stopid_2 | 
           (stop1, (stopid_2, c2), c, h, dt) : Connection :- 
             (stop1, (stopid_2, c2), c, h, dt) isin net(getStop(stopid2, net))}, 
      	 
      -- get minimum headway between two connected stops            
      minHeadway : StopId >< StopId >< Net -~-> Headway
      minHeadway(stopid1, stopid2, net) is 
        if areDirectlyConnected(stopid1, stopid2, net) 
        then 
          hd ({h | 
               (stop1, (stopid_2, c2), c, h, dt) : Connection :- 
                 (stop1, (stopid_2, c2), c, h, dt) isin 
                   net(getStop(stopid2, net))}) 
        else 0 
        end, 
      	 
      --  -- get the capacity for a connection between two connected stops
      --    
      capacity : StopId >< StopId >< Net -~-> Capacity
      capacity(stopid1, stopid2, net) is 
        if areDirectlyConnected(stopid1, stopid2, net) 
        then 
          hd ({c | 
               (stop1, (stopid_2, c2), c, h, dt) : Connection :- 
                 (stop1, (stopid_2, c2), c, h, dt) isin 
                   net(getStop(stopid2, net))}) 
        else 0 
        end, 
      	 
      --   -- get minimum driving time between two connected stops    
      --        
      minDrivingTime : StopId >< StopId >< Net -~-> DrivingTime
      minDrivingTime(stopid1, stopid2, net) is 
        if areDirectlyConnected(stopid1, stopid2, net) 
        then 
          hd ({dt | 
               (stop1, (stopid_2, c2), c, h, dt) : Connection :- 
                 (stop1, (stopid_2, c2), c, h, dt) isin 
                   net(getStop(stopid2, net))}) 
        else 0 
        end, 
      	 
      -- value /* predicates to check nets */    
      isWellformed : Net -> Bool
      isWellformed(n) is 
        (all (id, c) : Stop :- 
           (id, c) isin dom n => 
             (all (stop1, (stopid_2, c2), c, h, dt) : Connection :- 
                (stop1, (stopid_2, c2), c, h, dt) isin n(getStop(id, n)) => 
                  areDirectlyConnected(id, stopid_2, n))) -- Requirement 1: Net connections needs to be symmetrical    
        -- test values    
    	 
    value 
      -- Beach <-> Stop <-> Post
      testMap : Net = 
        [("Post", 3) +> {(("Post", 3), ("Stop", 2), 5, 7, 9)}, 
         ("Stop", 2) +> 
         {(("Stop", 2), ("Beach", 4), 6, 8, 10), 
          (("Stop", 2), ("Post", 3), 5, 7, 9)}, 
         ("Beach", 4) +> {(("Beach", 4), ("Stop", 2), 6, 8, 10)}], 
      addConnectionResult : Net = 
        [("Stop", 2) +> 
         {(("Stop", 2), ("Post", 3), 5, 7, 9), 
          (("Stop", 2), ("Beach", 4), 6, 8, 10)}, 
         ("Post", 3) +> {(("Post", 3), ("Stop", 2), 5, 7, 9)}, 
         ("Beach", 4) +> 
         {(("Beach", 4), ("Stop", 2), 6, 8, 10), 
          (("Beach", 4), ("City", 2), 1, 2, 3)}, 
         ("City", 2) +> {(("City", 2), ("Beach", 4), 1, 2, 3)}] 
    	 
    test_case 
      [isInTest1]
        ~ isIn("Stawdawdop", testMap), 
      [isInTest2]
        isIn("Stop", testMap), 
      [getCapicity1]
        capacity("Stop", testMap) = 4, 
      [getStop1]
        getStop("Stop", testMap) = ("Stop", 2), 
      [getStop2]
        getStop("Post", testMap) ~= ("Stop", 2), 
      [areDirectlyConnected1]
        ~ areDirectlyConnected("Post", "Beach", testMap), 
      [areDirectlyConnected2]
        areDirectlyConnected("Stop", "Beach", testMap), 
      [connectionCapicity1]
        capacity("Stop", "Post", testMap) = 5, 
      [minHeadway1]
        minHeadway("Stop", "Post", testMap) = 7, 
      [DrivingTime1]
        minDrivingTime("Stop", "Post", testMap) = 9, 
      [wffTest1]
        isWellformed(testMap), 
      [insertStop1]
        insertStop("City", 2, testMap), 
      [addConnection]
        addConnection("City", "Beach", 1, 2, 3, insertStop("City", 2, testMap)) = addConnectionResult
  end
