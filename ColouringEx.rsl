ColouringBasics

scheme ColouringEx =
extend ColouringBasics with 
class
  
  value
   
  empty : Colouring = {{}},
  ColouringList : Colouring = {{}},

   remove : Piece >< RelationMap -> RelationMap
   remove((p, r)) is
   r \ {p},
/*
   create_colour : Colour >< Piece >< RelationMap >< RelationMap -> Colour
   create_colour((c, p, r, rm)) is
   if (r = []) then c else if ((all ps : Piece :- ps isin c => ~areNb(ps, p, rm))) then create_colour(c union {p}, hd(dom r), remove((p, r)), rm) else create_colour(c, hd(dom r), remove((p, r)), rm) end end,

   create_colouring : Colouring >< Piece >< RelationMap >< RelationMap -> Colouring
   create_colouring((cl, p, r, rm)) is
   {create_colour({}, hd(dom r), remove((p, r)), rm)},  
*/


   

  --  check_colour : Colouring >< Piece >< RelationMap -> Colour
  --  check_colour((cl, ps, r)) is
  --  (all c : Colour :- c isin cl /\ ps ~isin c /\ (all p : Piece :- p isin c /\ areNb(p, ps, r)) => c union {ps})

  
  

   col : Relation -~-> Colouring
   col(r) is(
	  let
		(p1, p2) = hd(r) : (Piece >< Piece)

	  in
		(all c : Colour :- c isin ColouringList => c union
		{p1, p2})
	  end
)
   pre isRelation(r)

  test_case
/*
    [t1]
      hd(empty),
    [t2]
      remove("P2", relationMap),
    [t3]
      col(relationMap)

*/
[t1]
	hd(Relations),
[t2]
	col(Relations),	
[t3]
	{1,2,3,4} union {5}
  end