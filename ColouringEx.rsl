ColouringBasics

scheme ColouringEx =
extend ColouringBasics with 
class
  
  value
   
  empty : Colouring = {},


   remove : Piece-set >< RelationMap -> RelationMap
   remove((p, r)) is
   r \ p,

   create_colour : Colour >< Piece >< RelationMap >< RelationMap -> Colour
   create_colour((c, p, r, rm)) is
   if (r = []) then c else if ((all ps : Piece :- ps isin c => ~areNb(ps, p, rm))) then create_colour(c union {p}, hd(r), remove(({p}, r)), rm) else create_colour(c, hd(r), remove(({p}, r)), rm) end end,

   create_colouring : Colouring >< RelationMap >< RelationMap -> Colouring
   create_colouring((cl, r, rm)) is
   if(rm = []) then cl else
   create_colouring(cl union {create_colour({}, hd(rm), r, rm)}, remove((create_colour({}, hd(r), r, rm), r)), remove((create_colour({}, hd(r), r, rm)), rm)) end, 

   

  --  check_colour : Colouring >< Piece >< RelationMap -> Colour
  --  check_colour((cl, ps, r)) is
  --  (all c : Colour :- c isin cl /\ ps ~isin c /\ (all p : Piece :- p isin c /\ areNb(p, ps, r)) => c union {ps})

  
  

   col : RelationMap -~-> Colouring
   col(r) is
   create_colouring((empty, r, r))
   pre isRelation(r)

  test_case
    [t1]
      hd(empty),
    [t3]
      col(relationMap)
  end