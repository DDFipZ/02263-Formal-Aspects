ColouringBasics
	
scheme ColouringEx = 
  extend ColouringBasics with 
  class 
    value 
      empty : Colouring = {}, 
      
      remove : Piece-set >< Relation -> Relation
      remove((p, r)) is r \ p, 

      createColour : Colour >< Piece >< Relation >< Relation -> Colour
      createColour((c, p, r, rm)) is 
        if (r = []) then c 
        else 
          if ((all ps : Piece :- ps isin c => ~ areNb(ps, p, rm))) 
          then createColour(c union {p}, hd (r), remove(({p}, r)), rm) 
          else createColour(c, hd (r), remove(({p}, r)), rm) 
          end 
        end, 
      	
      createColouring : Colouring >< Relation >< Relation -> Colouring
      createColouring((cl, r, rm)) is 
        if (rm = []) then cl 
        else 
          createColouring(
             cl union {createColour({}, hd (r), r, rm)}, 
             remove((createColour({}, hd (r), r, rm), rm)), 
             remove((createColour({}, hd (r), r, rm)), rm)) 
        end, 
      	
      col : Relation -~-> Colouring
      col(r) is createColouring((empty, r, r)) pre isRelation(r)
    	 
    test_case 
      [t1]
        col(relationMap),
      [t2]
        isCorrectColouring(col(relationMap), relationMap)

  end
